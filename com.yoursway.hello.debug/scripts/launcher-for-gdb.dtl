dtl$debug = 128

procedure  dtl$debugpna (breakproc, fpx)
    if isnil(breakproc) then return "<nil>"
    
	local  name = _dbg_ (17, breakproc)

	return name

	; check whether this name can belong to a method
	if (tail (1, ":", name) = "") then  return  name

	; check whether the given procedure has a local symbol table
	local  local_symbol_table == _dbg_ (8, breakproc)
	if isnil (local_symbol_table) then  return  name

	local  locals == dict (symbol (local_symbol_table) )
	locals[0] == local_symbol_table

	; check whether the local symbol table contains the symbol "self"
	if (symbol (locals) = 0) then  return  name

	local  symbol_name = symbol (locals, 1)
	if (symbol_name <> "self") then  return  name

	local  method == _dbg_ (9, fpx - 1)
	if (method:classname = elem (0, ":", name) ) then  return  name

	return  method:classname + "(" + elem (0, ":", name) + ")" + ":" + tail (1, ":", name)
end

procedure  dtl$debug_procname (breakproc)
    if isnil(breakproc) then return "<nil>"
    return _dbg_(17, breakproc)
end

procedure  dtl$debug_filename (breakproc)
    if isnil(breakproc) then return "<nil>"
    return _dbg_(7, breakproc)
end

procedure dtl$debug_filename_for_frame(x)
    local proc = _dbg_(14, x)
    if isnil(proc) then return "<nil>"
    ; XXX
    if isnil(_dbg_(17, proc)) then return "<nil>"
    return _dbg_(7, proc)
end

procedure dtl$debug_linenumber_for_frame(x)
    local proc = _dbg_(14, x)
    local off = _dbg_(15, x) 
    if isnil(proc) then return 0
    local procname = _dbg_(17, proc)
	if "<UNNAMED>" = procname or isnil(procname) then return 0
    return _dbg_(3, proc, off)
end

procedure dtl$debug_filename_for_frame(i)
	local proc = _dbg_ (14, i)
    if isnil (proc)
		return "<MACH>"
	fi
	return  _dbg_ (7, proc)
end

procedure dtl$debug_proc_for_frame(i)
	local proc = _dbg_ (14, i)
    if isnil (proc)
		return "<MACH>"
	fi
	local ans = _dbg_ (17, proc)
	if isnil(ans) then return "<nil>"	
	return  ans
end

procedure dtl$debug_line_for_frame(i)
	local  proc = _dbg_ (14, i)
    if isnil (proc)
		return 0
	fi
	local procname = _dbg_(17, proc)
	if "<UNNAMED>" = procname		
	  return _dbg_(3, proc, -1)
	else
		return _dbg_(3, proc, _dbg_(15, i))
	fi
end

procedure  dtl$debug (breakproc, off, fpx, brktype)
	;ty "dtl$debug on"
    dumpobj breakproc
	ty "breakproc = ", breakproc, " off = ", off, ", fpx = ", fpx, ", brktype = ", brktype
	dumpobj breakproc
	dtl$debug = 128
	
	if string(breakproc) <> "<Proc> "
	   ty "SHIT: ", string(breakproc)
	   return
    fi
	
	if not isnil(breakproc)
	   dumpobj breakproc
		global _dtl$debug_off = off
		global _dtl$debug_fpx = fpx
		global _dtl$debug_brktype = brktype	
		global _dtl$debug_frames = _dbg_ (13)
		global _dtl$debug_currentline = -42
		global _dtl$debug_breakproc = breakproc
		
		dumpobj breakproc
		
		local procname = _dbg_(17, breakproc)
		if "<UNNAMED>" = procname or isnil(procname)
			_dtl$debug_currentline = _dbg_(3, breakproc, -1)
		else
			_dtl$debug_currentline = _dbg_(3, breakproc, off)
		fi
		dtl_debug_c_handler()
		
		_dtl$debug_breakproc = %nil
	fi
	

	;ty "dtl$debug off"

    _dbg_(10, 1)
    _dbg_(11, 1)
;	_dbg_(23, 1)
end

procedure dtl$onstoreproc1(proc)	
	_dbg_(19, 0)
    _dbg_(10, 0)
    _dbg_(11, 0)
	global _dtl$onstoreproc_breakproc == proc
	dtl_storeproc_c_handler()
    _dbg_(10, 1)
    _dbg_(11, 1)
	_dbg_(23, 1)
end

; VARIABLES and WATCHES stuff

procedure dtl$debug_prepare_locals_list(frame)
  global dtl$debug_locals
	local proc
	if frame = -1
		proc = _dtl$debug_breakproc		
	else
		proc = _dbg_(14, frame)
	fi
	
	if isnil(proc) then return 0
  
	dtl$debug_locals == _dbg_(8, proc)	
    if isnil(dtl$debug_locals)
		return 0
	else	   
  	    return symbol(dtl$debug_locals)
	fi
end

procedure dtl$debug_prepare_locals_list_for_proc(procname)
    global dtl$debug_locals
    local proc == dtl$proc[procname]
    if isnil(proc) then return 0
    
    dtl$debug_locals = _dbg_(8, proc)
    
    if isnil(dtl$debug_locals)
        return 0
    else       
        return symbol(dtl$debug_locals)
    fi    
end

; takes dtl$debug_local_value and sets dtl$debug_locals to
; it's fields dict
; returns size of this dict
procedure dtl$debug_prepare_fields_list()
  global dtl$debug_local_value 
  
 ; ty "prepare_fields_list"
 ; dumpobj dtl$debug_local_value
  
  global dtl$debug_locals = %nil
  if isdict(dtl$debug_local_value)
    dtl$debug_locals == dtl$debug_local_value
  elsif isarray(dtl$debug_local_value)
    local count = sizeof(dtl$debug_local_value)    
    dtl$debug_locals = dict(count)
    for i = 0 to count - 1
        local index = string(i)
        dtl$debug_locals[index] == dtl$debug_local_value[i]
    od
  elsif not isnil(dtl$debug_local_value)
  	local info = dumpobj(dtl$debug_local_value, 1)
	if (info = "Inst" and dtl$debug_local_value:has_method("todict"))
		dtl$debug_locals == dtl$debug_local_value:todict()
	fi
  fi
  if isnil(dtl$debug_locals)
		return 0
  else
  	return symbol(dtl$debug_locals)
  fi
end

; returns the name of i-th field from the dtl$debug_locals
procedure dtl$debug_fetch_name(index)
    global dtl$debug_locals
    return symbol(dtl$debug_locals, index + 1)
end

; fetches a local var by index from the local stack
; and puts to dtl$debug_local_value
procedure dtl$debug_prepare_local_value(fpno, index)
  local fp
  if fpno = -1
    fp = _dtl$debug_fpx
  else
    fp = _dbg_(16, fpno)
  fi
  local idx = fp - (index + 1)
  global dtl$debug_local_value == _dbg_(9, idx)
end

; sets dtl$debug_local_value to a its field named fieldname
procedure dtl$debug_prepare_field_value(fieldname) 
  global dtl$debug_locals
  dtl$debug_prepare_fields_list()
  local info = dumpobj(dtl$debug_locals[fieldname], 1)
  if (info = "Inst" and dtl$debug_locals[fieldname]:has_method("todict"))
    local x == dtl$debug_locals[fieldname]:todict()
    if (symbol(x) > 0)
      global dtl$debug_local_value == dtl$debug_locals[fieldname]
      return
    fi
  fi
  global dtl$debug_local_value = string(dtl$debug_locals[fieldname])
end

; formats dtl$debug_local_value as string and returns it
procedure dtl$debug_fetch_value_value
	global dtl$debug_local_value
	return string(dtl$debug_local_value)
end

procedure dtl$debug_prepare_watches(frame, expression)
	local proc, fp
	if frame = -1
		proc = _dtl$debug_breakproc
		fp = _dtl$debug_fpx
	else
		proc = _dbg_(14, frame)
		fp = _dbg_(16, frame)
	fi
	
	if isnil(proc) then return -1
      
	local magic_spell = "procedure dtl$debug_eval_me_please(); "

	local locals == _dbg_(8, proc)
	if not isnil(locals)
    	local locals_count = symbol(locals)
    	for i = 1 to locals_count
    		local idx = fp - i
    	  local lname = symbol(locals, i)
    	  if lname = "."  then lname = "$dot"
    		local cmd = "local " + lname + " = _dbg_(9, " + string(idx) + ");"
    		magic_spell = magic_spell + cmd
    	od	
    fi
	magic_spell = magic_spell + " return " + expression + "; end"
	return magic_spell
end

procedure dtl$debug_fetch_value_type
	global dtl$debug_local_value
	if isnil(dtl$debug_local_value) then return "nil"
	if isstring(dtl$debug_local_value) then return "string"
	if isnumber(dtl$debug_local_value) then return "number"
	if isarray(dtl$debug_local_value) then return "array"
	if isdict(dtl$debug_local_value) then return "dict"
	
	local info = dumpobj(dtl$debug_local_value, 1)
	if (info = "Inst")
		return dtl$debug_local_value:classname()
	fi
	return info
end

procedure dtl$debug_fetch_value_has_children
	global dtl$debug_local_value
	if isnil(dtl$debug_local_value) then return 0
	if isstring(dtl$debug_local_value) then return 0
	if isnumber(dtl$debug_local_value) then return 0
	if isarray(dtl$debug_local_value) then return 1
	if isdict(dtl$debug_local_value) then return 1	
	return 1
end



; the following will be replaced with environment setup
;;attachenv

global _dtl_debug_bltin_ = "/Users/fourdman/Projects/internal/ys/dtl-git/com.yoursway.hello.debug/scripts/libdbgbltin.dylib"
;lognam("DTL_DEBUG_BUILTIN")

;;noattach
global _dtl_debug_program_ = "/Users/fourdman/Projects/internal/ys/runtime-New_configuration/dttmagic/master.dtl"
;lognam("DTL_DEBUG_PROGRAM")

deflognam("DTL_DEBUG_REQ_PORT", "3333")
deflognam("DTL_DEBUG_EV_PORT", "4444")
deflognam("DTL_DEBUGGER_LOG", "/tmp/dbglog")
deflognam("DTL_DEBUG_MODE", "launch")

ty "Loading the debugging builtin: ", _dtl_debug_bltin_
load_bltin _dtl_debug_bltin_, "dbgbltin"

ty "...done"

dtl_debug_start_handler()

;_dbg_(23, 1)
_dbg_(19, 1)

ty "Compiling:", _dtl_debug_program_ 
;;noattach
compile _dtl_debug_program_


